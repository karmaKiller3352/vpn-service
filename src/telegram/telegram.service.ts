import * as fs from 'fs';
import * as path from 'path';
import * as ngrok from 'ngrok';
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, NarrowedContext, Context, Markup } from 'telegraf';
import { Update } from 'telegraf/typings/core/types/typegram';

import { MainService } from 'src/main/main.service';
import { WireGuardService } from 'src/wireguard/wireguard.service';

const adminUsers = [675781955];

const getConfigurationMessage = (formattedDate: string) =>
  `*–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!*\n\n` +
  `üîë **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:** ${formattedDate} –ú–°–ö (UTC+3).\n` +
  `1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Wireguard –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å¬ª.\n` +
  `2Ô∏è‚É£ **–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥** –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n` +
  `3Ô∏è‚É£ **–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å [–≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π](https://rutube.ru/video/7260a31da6735c0205d526c317f9b9d7/)** –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ \n\n` +
  `‚ö†Ô∏è **–í–∞–∂–Ω–æ**: –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É". `;

const getFormattedDate = (expirationDate: string) =>
  new Date(expirationDate).toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
  });

const defaultTGMenu = [
  { command: 'request_config', description: 'üìÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥' },
  { command: 'renew_subscription', description: 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' },
  { command: 'support', description: '–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É' },
];
@Injectable()
export class TelegramService {
  public bot: Telegraf;
  private apiURL: string;
  private isDev: boolean;

  constructor(
    private configService: ConfigService,
    private mainService: MainService,
    private wgService: WireGuardService,
  ) {
    this.isDev = this.configService.get<string>('NODE_ENV') === 'development';
    this.apiURL = this.isDev
      ? this.configService.get<string>('DEV_API_URL')
      : this.configService.get<string>('PROD_API_URL');

    this.bot = new Telegraf(this.configService.get<string>('BOT_TOKEN'));
  }

  async onModuleInit() {
    await this.setupWebhook();
  }

  private async setupWebhook() {
    if (this.isDev) {
      try {
        // –ó–∞–ø—É—Å–∫ ngrok –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
        const ngrokUrl = await ngrok.connect({
          addr: '8443', // –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç NestJS
          region: 'us', // –†–µ–≥–∏–æ–Ω ngrok (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å),
          authtoken: this.configService.get<string>('NGROK_AUTHTOKEN'),
        });

        console.log(`üîó NGROK URL: ${ngrokUrl}`);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ Telegram —Å –ø—É–±–ª–∏—á–Ω—ã–º URL
        const webhookUrl = `${ngrokUrl}/api/tg-webhook`;
        await this.bot.telegram.setWebhook(webhookUrl);
        console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ development mode: ${webhookUrl}`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ —á–µ—Ä–µ–∑ NGROK:', error);
      }
    } else {
      try {
        const webhookUrl = `${this.apiURL}/api/tg-webhook`;
        await this.bot.telegram.setWebhook(webhookUrl);
        console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ production  mode: ${webhookUrl}`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ:', error);
      }
    }

    await this.initializeBot();
  }

  private async initializeBot() {
    this.bot.start(async (ctx) => {
      console.log('–°—Ç–∞—Ä—Ç', ctx);
      const response =
        `–í—Å—ë –ø—Ä–æ—Å—Ç–æ ‚Äî —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–∏–º —à–∞–≥–∞–º, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:\n` +
        `1) **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard-–∫–ª–∏–µ–Ω—Ç**:
  - üì± [iOS](https://apps.apple.com/app/wireguard/id1441195209)
  - ü§ñ [Android](https://play.google.com/store/apps/details?id=com.wireguard.android)
  - üíª [Windows](https://www.wireguard.com/install/)
  - üçé [MacOS](https://www.wireguard.com/install/)\n` +
        `2) –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \n*¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é¬ª*\n –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n` +
        `‚ö†Ô∏è *–í–∞–∂–Ω–æ*: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.`;

      await ctx.sendChatAction('typing'); // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
      await ctx.reply(
        '*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN-—Å–µ—Ä–≤–∏—Å!*',
        this.createKeyboardMenu(),
      );

      ctx.reply(response, {
        parse_mode: 'Markdown',
        link_preview_options: { is_disabled: true },
        ...Markup.inlineKeyboard([
          Markup.button.callback(
            'üîß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é',
            'generate_config',
          ),
        ]),
      });
    });

    this.bot.action('generate_config', (ctx) => this.handleGenerateConfig(ctx));

    this.bot.telegram.setMyCommands(defaultTGMenu);

    this.bot.command('support', (ctx) => {
      ctx.reply(
        '–ï—Å–ª–∏ —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ –æ–ø–ª–∞—Ç–æ–π –Ω–∞–ø–∏—à–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É @vpnForPeopleSupport',
      );
    });

    // 2 —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥–∞
    this.bot.hears('üìÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥', (ctx) =>
      this.handleRequestConfig(ctx),
    );
    this.bot.command('request_config', (ctx) => this.handleRequestConfig(ctx));

    // 2 —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    this.bot.command('renew_subscription', (ctx) =>
      this.renewSubscription(ctx),
    );
    this.bot.hears('üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', (ctx) =>
      this.renewSubscription(ctx),
    );
    this.bot.action('renew_subscription', (ctx) => this.renewSubscription(ctx));

    this.bot.action('pay_by_card', (ctx) => this.payWithYoMoney(ctx));

    this.bot.action('pay_by_stars', (ctx) => this.payWithStars(ctx));

    this.bot.on('pre_checkout_query', async (ctx) =>
      this.handlePreCheckout(ctx),
    );

    this.bot.on('successful_payment', async (ctx) => {
      let endDateGlobal;
      try {
        const { id: userId } = await this.mainService.getUserByTGId(
          ctx.from.id,
        );

        const {
          extendedSubscription: { endDate },
          config: {
            id,
            user: { telegramId },
            clientAddress,
          },
        } = await this.mainService.updateSubscription({
          userId,
          additionalDays: 30,
        });
        endDateGlobal = endDate;
        await this.wgService.unblockAccess(clientAddress);

        await this.mainService.createLog({
          userId: id,
          eventType: 'UNBLOCK IP',
          targetId: null,
          targetType: 'configs',
          details: {
            additionalDays: 30,
            userTgId: telegramId,
            clientAddress: clientAddress,
            prolongationDate: new Date(),
            reason: 'subscription prolonged',
            providerData: ctx.update.message.successful_payment,
          },
        });
      } catch (error) {
        console.log(error);
      } finally {
        ctx.reply(
          `üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!` +
            ` ‚ú® –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ *${getFormattedDate(endDateGlobal.toString())}*.\n` +
            ` üîê –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É VPN-—Å–µ—Ä–≤–∏—Å—É.\n` +
            `üöÄ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n`,
          {
            parse_mode: 'Markdown',
          },
        );
      }
    });

    // admin commands
    this.bot.hears('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', async () => {
      await this.sendSubscriptionReminder(675781955, new Date());
    });

    this.bot.action('send_notification', async () => {
      await this.sendSubscriptionReminder(675781955, new Date());
    });

    this.bot.action('generate_hidden_user', async (ctx) => {
      try {
        const uniqId = Date.now();
        const { qrCode, configFilePath } =
          await this.mainService.addHiddenUser(uniqId);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ—Å–ª–µ "base64,")
        const base64Data = qrCode.split(',')[1];

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Base64 —Å—Ç—Ä–æ–∫—É –≤ Buffer
        const imageBuffer = Buffer.from(base64Data, 'base64');

        // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const tempFilePath = path.join(__dirname, 'temp_config.conf');

        fs.writeFileSync(tempFilePath, configFilePath);

        await ctx.replyWithPhoto({ source: imageBuffer });
        await ctx.replyWithDocument({
          source: tempFilePath,
          filename: `hidden-user-${uniqId}.conf`,
        });

        await ctx.reply(`–í–∞—à –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –¥—Ä—É–≥–∞ –≥–æ—Ç–æ–≤`);
      } catch (error) {
        console.error(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:',
          error.response?.message,
        );
        ctx.answerCbQuery();
      }
    });

    this.bot.command('admin', async (ctx) => {
      const tgId = ctx.message.from.id;

      if (!adminUsers.includes(tgId)) {
        await ctx.reply(`–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥`);

        return;
      }

      const sentMessage = await ctx.reply(`–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥`, {
        parse_mode: 'Markdown',
        link_preview_options: { is_disabled: true },
        ...Markup.inlineKeyboard([
          Markup.button.callback(
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
            'send_notification',
          ),
          Markup.button.callback('–ö–æ–Ω—Ñ–∏–≥ –¥–ª—è –¥—Ä—É–≥–∞', 'generate_hidden_user'),
        ]),
      });

      await ctx.telegram.pinChatMessage(ctx.chat.id, sentMessage.message_id);
    });
  }

  private async renewSubscription(ctx) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
      await ctx.reply(`*–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü:*\n`, {
        ...Markup.inlineKeyboard([
          [Markup.button.callback('–ó–∞–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π - 100 ‚ÇΩ', 'pay_by_card')],
          [Markup.button.callback('Telegram Stars - 125 ‚≠ê', 'pay_by_stars')],
        ]),
        parse_mode: 'Markdown',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ü–∏–π –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handlePreCheckout(
    ctx: NarrowedContext<Context<any>, Update.PreCheckoutQueryUpdate>,
  ) {
    console.log(ctx);
    await ctx.answerPreCheckoutQuery(true);
  }

  private createKeyboardMenu(): any {
    return {
      ...Markup.keyboard([
        ['üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'üìÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥'], // –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
      ])
        .resize() // –ü–æ–¥–≥–æ–Ω—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —ç–∫—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        .oneTime(false),
      disable_web_page_preview: false,
      parse_mode: 'Markdown',
    };
  }

  private async handleGenerateConfig(ctx) {
    try {
      const userId = ctx.from.id;

      const { qrCode, configFilePath, expirationDate } =
        await this.mainService.addTGUser({ telegramId: userId });

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ—Å–ª–µ "base64,")
      const base64Data = qrCode.split(',')[1];

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Base64 —Å—Ç—Ä–æ–∫—É –≤ Buffer
      const imageBuffer = Buffer.from(base64Data, 'base64');

      // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const tempFilePath = path.join(__dirname, 'temp_config.conf');

      fs.writeFileSync(tempFilePath, configFilePath);

      await ctx.replyWithPhoto({ source: imageBuffer });
      await ctx.replyWithDocument({
        source: tempFilePath,
        filename: 'wireguard_config.conf',
      });
      ctx.answerCbQuery();

      await ctx.reply(
        getConfigurationMessage(getFormattedDate(expirationDate)),
        this.createKeyboardMenu(),
      );
    } catch (error) {
      console.error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:',
        error.response?.message,
      );

      if (error.response?.statusCode === 409) {
        await ctx.reply(
          '‚ùå –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π \n¬´–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥¬ª –≤ –º–µ–Ω—é —á—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.',
          this.createKeyboardMenu(),
        );
      }

      ctx.answerCbQuery();
    }
  }

  private async handleRequestConfig(ctx) {
    try {
      const { qrCode, configFilePath, expirationDate } =
        await this.mainService.requestTgUserConfig({
          telegramId: ctx.from.id,
        });

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ—Å–ª–µ "base64,")
      const base64Data = qrCode.split(',')[1];

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Base64 —Å—Ç—Ä–æ–∫—É –≤ Buffer
      const imageBuffer = Buffer.from(base64Data, 'base64');

      // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const tempFilePath = path.join(__dirname, 'temp_config.conf');

      fs.writeFileSync(tempFilePath, configFilePath);

      await ctx.replyWithPhoto({ source: imageBuffer });
      await ctx.replyWithDocument({
        source: tempFilePath,
        filename: 'wireguard_config.conf',
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(
        getConfigurationMessage(getFormattedDate(expirationDate)),
        {
          disable_web_page_preview: false,
          parse_mode: 'Markdown',
        },
      );
    } catch (error) {
      console.error(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:',
        error.response?.data || error.message,
      );
      ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async payWithYoMoney(ctx) {
    console.log('–ó–∞–ø–ª–∞—Ç–∏—Ç—å —Å –ø–æ–º–æ—â—å—é YMoney', ctx);
    try {
      await ctx.sendInvoice({
        title: '–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –∏–ª–∏ YMoney',
        description: '–î–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 1 –º–µ—Å—è—Ü.',
        payload: 'vpn_subscription_1_month_ymoney',
        provider_token: this.configService.get<string>('YMONEY_PROVIDER_TOKEN'),
        currency: 'RUB',
        prices: [{ label: '1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏', amount: 10000 }],
        start_parameter: 'get_access',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞:', error);
      ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async payWithStars(ctx) {
    try {
      await ctx.sendInvoice({
        title: 'Telegram Stars Payment',
        description: '–î–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 1 –º–µ—Å—è—Ü.',
        payload: 'vpn_subscription_1_month_stars',
        currency: 'XTR',
        prices: [{ label: '1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏', amount: 125 }],
        start_parameter: 'get_access',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞:', error);
      ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async sendSubscriptionReminder(chatId: number, expirationDate: Date) {
    const message = `üîî –í–Ω–∏–º–∞–Ω–∏–µ! üîî \n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN –∏—Å—Ç–µ–∫–∞–µ—Ç –º–µ–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ ${getFormattedDate(expirationDate.toLocaleString())}\n. 
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø.`;
    console.log(
      '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
      chatId,
    );

    await this.bot.telegram.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      link_preview_options: { is_disabled: true },
      ...Markup.inlineKeyboard([
        Markup.button.callback('üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'renew_subscription'),
      ]),
    });
  }
}
