import { AddTgUser } from './main.types';
import {
  Get,
  Post,
  Query,
  Controller,
  Body,
  Delete,
  HttpCode,
} from '@nestjs/common';
import { MainService } from './main.service';
import { WireGuardService } from 'src/wireguard/wireguard.service';
import { Telegraf } from 'telegraf';

const bot = new Telegraf('7909061014:AAEnsyLCcGSSsMmccrqh86GkNSD-AggZdqM');

bot.hears('üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', async (ctx) => {
  try {
    const res = await ctx.sendInvoice({
      title: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN',
      description: '–î–æ—Å—Ç—É–ø –∫ VPN-—Å–µ—Ä–≤–∏—Å—É –Ω–∞ 1 –º–µ—Å—è—Ü.',
      payload: 'vpn_subscription_1_month', // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
      provider_token: '381764678:TEST:108590', // –¢–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      currency: 'RUB', // –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å

      prices: [
        { label: '1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏', amount: 10000 }, // –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (100.00 RUB)
      ],

      start_parameter: 'get_access', // –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–∞
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞:', error);
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});
bot.on("pre_checkout_query", async (ctx) => {
  try {
    console.log("–ü–æ–ª—É—á–µ–Ω pre_checkout_query:", ctx.update.pre_checkout_query);

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç—ë–∂ (true - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, false - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å)
    await ctx.answerPreCheckoutQuery(true);

    console.log("–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:", error);

    // –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂
    await ctx.answerPreCheckoutQuery(false, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞");
  }
});

@Controller()
export class MainController {
  constructor(
    private readonly service: MainService,
    private readonly wgService: WireGuardService,
  ) {}

  @Get('status')
  async getStatus() {
    return await this.wgService.getStatus();
  }

  @Post('add-tg-user')
  async addTGUser(@Body() user: AddTgUser) {
    return await this.service.addTGUser(user);
  }

  @Post('tg-webhook')
  @HttpCode(200)
  async tgWebHook(@Body() update) {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegraf
      await bot.handleUpdate(update);
      console.log('–ü–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Telegram:', update);

      return { status: 'ok', update };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
      return { success: false };
    }
  }

  @Post('request-tg-user-config')
  async requestTgUserConfig(@Body() user: AddTgUser) {
    return await this.service.requestTgUserConfig(user);
  }

  @Post('unblock-user')
  async unblockUser(
    @Query('days') additionalDays: number,
    @Query('userId') userId: number,
  ) {
    const {
      extendedSubscription,
      config: {
        id,
        user: { telegramId },
        clientAddress,
      },
    } = await this.service.updateSubscription({
      userId,
      additionalDays,
    });

    await this.wgService.unblockAccess(clientAddress);

    await this.service.createLog({
      userId: id,
      eventType: 'UNBLOCK IP',
      targetId: null,
      targetType: 'configs',
      details: {
        additionalDays,
        userTgId: telegramId,
        clientAddress: clientAddress,
        prolongationDate: new Date(),
        reason: 'subscription prolonged',
      },
    });

    return {
      endDate: extendedSubscription.endDate,
    };
  }

  @Delete('block-user')
  async blockUser(@Query('userId') userId: number) {
    const {
      extendedSubscription,
      config: {
        id,
        user: { telegramId },
        clientAddress,
      },
    } = await this.service.updateSubscription({
      userId,
      disableImmediately: true,
    });

    await this.wgService.blockAccess(clientAddress);

    await this.service.createLog({
      userId: id,
      eventType: 'BLOCK IP',
      targetId: null,
      targetType: 'configs',
      details: {
        userTgId: telegramId,
        clientAddress: clientAddress,
        blockingDate: new Date(),
        reason: 'subscription expired',
      },
    });

    return {
      endDate: extendedSubscription.endDate,
    };
  }

  @Post('block-expired-configs')
  async blockExpiredConfigs() {
    return await this.service.blockExpiredConfigs();
  }
}
